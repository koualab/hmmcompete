#!/usr/bin/env perl

# Version 0.1: 2017, May 1
# Version 0.2: 2021, Feb 4

use strict;
use warnings;

use Data::Dumper;
use Getopt::Long;
use Getopt::Declare;
use Carp qw( croak );
use English qw( -no_match_vars );
use Pod::Usage;
use Readonly;

my $EMPTY  = q{};
my $SPACE  = q{ };
my $HYPHEN = q{-};
my $SHARP  = q{#};

our $VERSION = '0.2';

Readonly my $LENCNT => 4;
Readonly my $CUTLEN => 23;

Readonly my $HMM_PRED_SCORE  => 13;
Readonly my $CLASSIFIER_NAME => 3;
Readonly my $HMM_QUERY_LEN   => 5;
Readonly my $ALIGNMENT_FROM  => 17;
Readonly my $ALIGNMENT_TO    => 18;
Readonly my $HMM_FROM        => 15;
Readonly my $HMM_TO          => 16;

#############################################################################
#               GENERAL SETTINGS: CUSTOMIZE TO YOUR SITE
#############################################################################
my $TEMP = '/tmp';

#############################################################################
#               NOTHING SHOULD NEED CHANGING BELOW THIS LINE!
#############################################################################
my $hmmcompete_version = 'hmmcompete ' . $VERSION;

# Process command line ------------------------------------------------------
my $args = Getopt::Declare->new(<<'EOSPEC') || exit 1;

	[strict]

	-i[n] <infile:if>		Specify input fasta file [required]
	--hmm <hmmdb:if>		Specify hmm database [required]
	-o[ut] <outfile:of>		Redirect the main human-readable output to a file <f> instead of the default stdout.
	-d[esc]		Display profile description in the main output when the description is present in the profile. Default: 'Off'.
	--altpred		Display number of alternative profile HMM matching a sequence as well as a summarized description of each alternative match. Default: 'Off'.
	--allseq		Also report sequences not matched by any model. Default: 'Off' i.e. only sequences matched by a profile in hmmDB are reported by default.
	--pepreg		Display region of the target sequence that matched the best model hit. Default: 'Off'.
	--getprec	Get precursors region that matched the best model hit. Default: 'Off'
	            [requires: --pepreg]
	--hsout		Hsout
	--fasout	Annotate input fasta file with hmmcompete results.
	--inanot	Add annotation to input sequence header.
	--hmmaln	Add alignment to final file.
	--htmout		Save a HTML version of the output. Useful for web integration.

	# Standard meta-options
	-v[ersion]		Print hmmcompete version and exit
	                        { $self->version(0); }
    -u[sage]		Print program usage and exit
	                		{ $self->usage(0); }
	--man		Print man page and exit
	                        { pod2usage( -exitval => 0, -verbose => 2 ); }
	-h[elp]		Print a brief reminder of command line usage and available options then exit.

EOSPEC

my $seqfile   = $args->{'in'};
my $hmmdb     = $args->{'hmm'};
my $csv_stats = $args->{'out'};
my $pfrdesc   = $args->{'desc'};
my $altpred   = $args->{'altpred'};
my $allseq    = $args->{'allseq'};
my $pepreg    = $args->{'pepreg'};
my $tblout    = $args->{'hsout'};
my $fasout    = $args->{'fasout'};
my $htmout    = $args->{'htmout'};
my $hmmaln    = $args->{'hmmaln'};
my $getprec   = $args->{'getprec'};
my $inanot    = $args->{'inanot'};

# Error handling for empty hmm or sequence file -----------------------------
if ( -s $hmmdb ) {
	print {*STDERR} 'hmmcompete error: HMM database not found!'
		. " Please check your input hmm file. Do hmmcompete -h for details.\n"
		or croak "Cannot print to STDERR: $OS_ERROR";
	exit 0;
}
if ( -s $seqfile ) {
	print {*STDERR}
		"hmmcompete error: Protein sequence database not found!\n"
		. " Please check your input file. Do hmmcompete -h for details.\n"
		or croak "Cannot print to STDERR: $OS_ERROR";
	exit 0;
}

# Die while writing access is refused for requested output file
my $writehs = 0;
my $hsoutfh;
if ( defined $tblout ) {
	open $hsoutfh, '>', $tblout
		or die "hmmcompete error: Cannot write file [$tblout]: $OS_ERROR\n";
	$writehs++;
}

# Standard output : write into $csvStats when -o option is chosen or send to standard output stream
my $openres = 0;
my $csvfh;
$openres = open $csvfh, '>', $csv_stats
	or croak "Cannot open file; $OS_ERROR";
if ( defined $openres ) {
	print {*STDERR} "hmmcompete warning : Output redirection failed!\n"
		. 'Result will be displayed on standard output!!'
		or croak "Print failed: $OS_ERROR";
	$csvfh = *STDOUT;
}

# Temporary output files
my $hmmresfile = $TEMP . '/hmmres_' . $PROCESS_ID . '.tbl';

######################################################
##  Main
######################################################

# Run hmmsearch
( system "hmmsearch --domtblout $hmmresfile $hmmdb  $seqfile  >/dev/null" )
	== 0
	or croak
	'hmmsearch failed. Make sure hmmsearch is installed and available in your PATH variable.';

# Get prediction from hmmresfile
open my $hsfh, '<', $hmmresfile
	or croak "Cannot read from hmmsearch result file: $OS_ERROR";
my $hscom = $EMPTY;
my %hitcount;
my $lncnt = 1;
while (<$hsfh>) {
	my $ln = $_;
	if ( $ln =~ /^#/msx ) {
		if ( $lncnt < $LENCNT ) {
			$hscom .= $ln;
		}
		$lncnt++;
		next;
	}
	my @el = split /\s+/msx, $ln, $CUTLEN;
	$hitcount{ $el[0] }->{'matches_count'}++;
	if ( $hitcount{ $el[0] }->{'matches_count'} == 1 ) {
		$hitcount{ $el[0] }->{'pred_score'}       = $el[$HMM_PRED_SCORE];
		$hitcount{ $el[0] }->{'matches_position'} = $EMPTY;
	}

	#unless defined ($hitcount{$el[0]}->{'matches_position'});
	$hitcount{ $el[0] }->{'matches_position'}
		.= '('
		. $el[$ALIGNMENT_FROM]
		. $HYPHEN
		. $el[$ALIGNMENT_TO]
		. $SHARP
		. $el[$CLASSIFIER_NAME]
		. $SHARP
		. $el[$HMM_PRED_SCORE] . ') ';

#$hitcount{$el[0]}->{'pred_score'} = $el[13] unless defined ($hitcount{$el[0]}->{'pred_score'});
	if ( $hitcount{ $el[0] }->{'pred_score'} <= $el[$HMM_PRED_SCORE] ) {
		$hitcount{ $el[0] }->{'pred_score'}      = $el[$HMM_PRED_SCORE];
		$hitcount{ $el[0] }->{'sequence_id'}     = $el[0];
		$hitcount{ $el[0] }->{'classifier_name'} = $el[$CLASSIFIER_NAME];
		$hitcount{ $el[0] }->{'ali_from'}        = $el[$ALIGNMENT_FROM];
		$hitcount{ $el[0] }->{'ali_to'}          = $el[$ALIGNMENT_TO];
		$hitcount{ $el[0] }->{'hmm_qlen'}        = $el[$HMM_QUERY_LEN];
		$hitcount{ $el[0] }->{'hmm_from'}        = $el[$HMM_FROM];
		$hitcount{ $el[0] }->{'hmm_to'}          = $el[$HMM_TO];
		$hitcount{ $el[0] }->{'pred_text'}       = $ln;
	}
}
close $hsfh or croak "Cannot close $hsfh: $OS_ERROR";

##############################################
## Output Classification Results
##############################################

# List selected columns to output
my @col = ('classifier_name');

# add information for target region when requested
if ( defined $pepreg ) {

	# add to column list
	push @col, qw( ali_from ali_to target_region );
	if ( defined $getprec ) {
		push @col, 'pseudo_precursor';
	}

	# Process FASTA file
	my $seq_hdb = _getseq($seqfile);

	# add regions
	for my $sqid ( keys %hitcount ) {
		my $pepregion = substr $seq_hdb->{$sqid},
			$hitcount{$sqid}->{'ali_from'} - 1,
			$hitcount{$sqid}->{'ali_to'} - $hitcount{$sqid}->{'ali_from'} + 1;
		$hitcount{$sqid}->{'target_region'} = $pepregion;

		# report precursor when asked
		if ( defined $getprec ) {
			$hitcount{$sqid}->{'pseudo_precursor'} = q{};
			if ( $seq_hdb->{$sqid} =~ m/([MX]?.*?$pepregion[^X]*X?)/msxg ) {
				$hitcount{$sqid}->{'pseudo_precursor'} = $1;
			}
		}
	}
}

# add columns for HMM match coordinates and region alignment based on the HMM if asked
if ( defined $hmmaln ) {
	push @col, qw( hmm_from  hmm_to  region_aln );
	my $seq_hdb = getseq($seqfile);

	# add region alignment
	for my $sqid ( keys %hitcount ) {
		my $reg;
		if ( defined $hitcount{$sqid}->{'target_region'} ) {
			$reg = $hitcount{$sqid}->{'target_region'};
		}
		else {
			$reg = substr $seq_hdb->{$sqid},
				$hitcount{$sqid}->{'ali_from'} - 1,
				$hitcount{$sqid}->{'ali_to'}
				- $hitcount{$sqid}->{'ali_from'} + 1;
		}
		$hitcount{$sqid}->{'region_aln'}
			= $HYPHEN x $hitcount{$sqid}->{'hmm_qlen'};
		substr $hitcount{$sqid}->{'region_aln'},
			$hitcount{$sqid}->{'hmm_from'} - 1,
			$hitcount{$sqid}->{'hmm_to'} - $hitcount{$sqid}->{'hmm_from'} + 1,
			$reg

#$hitcount{$sqid}->{'region_aln'} = ('-' x ($hitcount{$sqid}->{'hmm_from'}-1)).$reg;
	}
}

# add HMM description when requested
if ( defined $pfrdesc ) {

	# add to column list
	push @col, 'classifier_desc';

	# process HMM file
	my $hmm_hdb = _gethmmdesc($hmmdb);

	# add DESC lines
	for my $sqid ( keys %hitcount ) {
		$hitcount{$sqid}->{'classifier_desc'}
			= $hmm_hdb->{ $hitcount{$sqid}->{'classifier_name'} };
	}
}

# add columns for alternative HMM matches on request
if ( defined $altpred ) {
	push @col, qw( matches_count  matches_position );
}

# add information for non classified peptides when requested
if ( defined $allseq ) {

	# Process FASTA file
	my $seq_hdb = _getseq($seqfile);
	for my $sqid ( keys %{$seq_hdb} ) {
		for my $c (@col) {
			if ( !defined( $hitcount{$sqid}->{$c} ) ) {
				$hitcount{$sqid}->{$c} = 0;
			}
		}
		if ( !defined( $hitcount{$sqid}->{'hmm_from'} ) ) {
			$hitcount{$sqid}->{'hmm_from'} = 0;
		}
	}
}

# add input sequence annotation when asked. annotation should be present in
# fasta header as >seq_id #annotation#

if ( defined $inanot ) {
	unshift @col, 'seq_annotation';
	my $annlab = _getseqannot($seqfile);
	for ( keys %hitcount ) {
		$hitcount{$_}->{'seq_annotation'} = $annlab->{$_};
	}
}

# Prepare output ------------------------------------------------------------
my @orderedentries;
my %prfhitlist;
for my $h ( keys %hitcount ) {
	$prfhitlist{ $hitcount{$h}->{'classifier_name'} }{$h}
		= $hitcount{$h}->{'hmm_from'};
}

foreach my $hmmname ( sort keys %prfhitlist ) {
	foreach my $hitname (
		sort { $prfhitlist{$hmmname}{$a} <=> $prfhitlist{$hmmname}{$b} }
		keys %{ $prfhitlist{$hmmname} }
		)
	{
		push @orderedentries, $hitname;
	}
}

# hmmsearch output is written here when requested. This saves a second iteration through %hitcount.
if ($writehs) {
	print {$hsoutfh} $hscom or croak "Print failed: $OS_ERROR";
}
pmsg("sequence_id\t");
pmsg( join "\t", @col );
pmsg("\n");

for my $sqid (@orderedentries) {
	pmsg($sqid);
	for my $c (@col) {
		pmsg( "\t" . $hitcount{$sqid}->{$c} );
	}
	pmsg("\n");

	# write hmmsearch-like output
	if ($writehs) {
		print {$hsoutfh} $hitcount{$sqid}->{'pred_text'}
			or croak "Print failed: $OS_ERROR";
	}
}
if ($openres) {
	close $csvfh or croak "Cannot close file: $OS_ERROR";
}
if ($writehs) {
	close $hsoutfh or croak "Cannot close file: $OS_ERROR";
}

# fasta annotation of the initial query file is provided on request
if ( defined $fasout ) {
	write_fasta( 'fasta_out.fa', @orderedentries, %hitcount );
}

# html output when requested
if ( defined $htmout ) {
	write_html( 'hmmcompete.html', %hitcount, @col, @orderedentries );
}

# clean around and exit
unlink $hmmresfile;

exit 0;

# SUBROUTINES ---------------------------------------------------------------

# pmsg subroutine -----------------------------------------------------------
# Print to file or stdout according to declared option

sub pmsg {

	my (@text) = @_;
	my $output = 'hmmcompete_res.txt';

	open my $outfh, ( $csv_stats ? ">>$output" : '>&STDOUT' )
		or croak "Open output file failed: $OS_ERROR";
	print {$outfh} @text or croak "Cannot print to file [$outfh]: $OS_ERROR";
	close $outfh         or croak "Cannot close output file: $OS_ERROR";

	return;
}

# write_fasta subroutine ----------------------------------------------------
# Write a fasta output file when --fasout flag is used

sub write_fasta {

	my ( $infile, @entries, %hits ) = @_;

	my $seq_hdb = getseq($seqfile);
	my $hmm_hdb = gethmmdesc($hmmdb);
	my %myhash;

	for my $sqid (@orderedentries) {
		my $hder = ">$sqid" . ' #';
		if ( defined $hitcount{$sqid}->{'seq_annotation'} ) {
			$hder .= $hitcount{$sqid}->{'seq_annotation'} . ' ; ';
		}
		$hder
			.= $hitcount{$sqid}->{'classifier_name'}
			. $SPACE
			. $hmm_hdb->{ $hitcount{$sqid}->{'classifier_name'} } . "#\n";

		$myhash{$hder} = $seq_hdb->{$sqid};
	}

	open my $infh, '>', $infile
		or croak "Cannot open file [$infile]: $OS_ERROR";
	for my $k (%myhash) {
		print {$infh} $k . $myhash{$k} . "\n"
			or croak "Print failed: $OS_ERROR";
	}
	close $infh or croak "Cannot close [$infh]: $OS_ERROR";

	return;
}

# write_html subroutine -----------------------------------------------------
# Write a html output file when --htmout flag is used

sub write_html {

	my ( $filename, %whash, @wcol, @wordent ) = @_;

	open my $fhtml, '>', $filename
		or croak
		"hmmcompete error: Cannot write file [$filename]: $OS_ERROR\n";

	_writehtmldata( $fhtml, %whash, @wcol, @wordent );
	close $fhtml or croak "Cannot close $fhtml: $OS_ERROR";

	return;
}

sub _writehtmldata {

	my ( $fh, %mhash, @mcol, @mordent ) = @_;

	my $html_header = <<'HTML_HEADER';
	<!DOCTYPE HTML PUBLIC >
	<html lang='en-US'>
	<body>
HTML_HEADER

	my $html_footer = <<'HTML_FOOTER';
	</body>
	</html>
HTML_FOOTER

	print {$fh} $html_header or croak "Print failed: $OS_ERROR";
	print {$fh} '<h1>hmmcompete Result </h1>'
		or croak "Print failed: $OS_ERROR";
	print {$fh} "<p>Predictions based on $hmmdb </p>"
		or croak "Print failed: $OS_ERROR";
	print {$fh} scalar keys %mhash, ' sequences reported.<br/>'
		or croak "Print failed: $OS_ERROR";
	print {$fh} "\n <table  style=\"border:1px solid\">"
		or croak "Print failed: $OS_ERROR";
	unshift @mcol, 'sequence_id';

	for my $c (@mcol) {
		my $h = $c;
		$h =~ s/_/ /msxg;
		print {$fh} '<th style="border:1px solid">' . $h . '</th>'
			or croak "Print failed: $OS_ERROR";
	}
	print {$fh} '</tr>' or croak "Print failed: $OS_ERROR";

	for my $sqid (@mordent) {
		print {$fh} '<tr>' or croak "Print failed: $OS_ERROR";
		for my $c (@mcol) {
			print {$fh} '<td style="border:1px solid">',
				$mhash{$sqid}->{$c}, "</td>\n"
				or croak "Print failed: $OS_ERROR";
		}
		print {$fh} '</tr>' or croak "Print failed: $OS_ERROR";
	}
	print {$fh} "</table><br/><br/>\n"
		or croak "Print failed: $OS_ERROR";
	print {$fh} $html_footer or croak "Print failed: $OS_ERROR";

	close $fh or croak "Cannot close $fh: $OS_ERROR";

	return;

}

# getseq subroutine ---------------------------------------------------------
# $seqhref=_getseq($fastadbFileName)
# return a hashref $entries->{$id}=$seq of sequences from a FASTA file

sub getseq {

	my ($file) = @_;
	open my $fh, '<', $file
		or croak
		"functions::_getseq failed. Cannot open the file [$file]: $OS_ERROR\n";
	my %entries = _parsegetseq($fh);
	close $fh or croak "Cannot close $fh: $OS_ERROR";
	return \%entries;
}

sub _parsegetseq {

	my ($fh) = @_;

	local $INPUT_RECORD_SEPARATOR = "\n>";
	my %entries;
	while (<$fh>) {
		chomp( my $entry = $_ );
		my $ent;
		$entry =~ s/>//msxg;
		$entry =~ s/[\n\r]/\n/msxg;
		my ( $id, $seq ) = split /\n/msx, $entry, 2;
		if ( $id =~ /(\S+)\s?/msx ) {
			$ent = $1;
		}
		else {
			$ent = $EMPTY;
		}
		$seq =~ s/[\s\n\r]//msxg;

		#        $seq =~ s/[BJOUZ]/X/ig;
		# Since perl 5.12, length don't return a warning
		# when it meet an undef value. So it can be used
		# to check if a value is undef or empty string :)
		if ( !length $ent && defined $seq ) {
			$entries{$ent} = uc $seq;
		}
	}
	return %entries;

}

# getseqannot subroutine ----------------------------------------------------

sub getseqannot {
	my ($file) = @_;
	open my $fh, '<', $file
		or croak
		"functions::getseqannot failed. Cannot open the file [$file]: $OS_ERROR\n";
	my %entries = _parsegetseqannot($fh);
	close $fh or croak "Cannot close $fh: $OS_ERROR";
	return \%entries;
}

sub _parsegetseqannot {

	my ($fh) = @_;
	local $INPUT_RECORD_SEPARATOR = "\n>";
	my %entries;
	while (<$fh>) {
		chomp( my $entry = $_ );
		$entry =~ s/>//msxg;
		$entry =~ s/[\n\r]/\n/msxg;
		my ( $id, $seq ) = split /\n/msx, $entry, 2;
		my ( $ent, $annot );
		if ( $id =~ /(\S+)\s?/msx ) {
			$ent = $1;
		}
		if ( $id =~ /#(.*?)#/msx ) {
			$annot = $1;
		}
		else {
			$annot = 'None';
		}
		$entries{$ent} = $annot;
	}
	return %entries;
}

# gethmmdesc subroutine -----------------------------------------------------
# $hmmhref = gethmmdesc($hmmDbFileName)
# return a hashref $entries->{$hmmName} = $hmmDesc with profile
# HMM description from a HMM file

sub gethmmdesc {
	my ($file) = @_;
	local $INPUT_RECORD_SEPARATOR = q{//};
	open my $fh, '<', $file
		or croak
		"function gethmmdesc failed. Cannot open the file [$file]: $OS_ERROR\n";
	my %entries = _parsegethmmdesc($fh);
	close $fh or croak "Cannot close $fh: $OS_ERROR";
	return \%entries;
}

sub _parsegethmmdesc {

	my ($fh) = @_;
	my %entries;
	my ( $name, $desc );

	while (<$fh>) {
		chomp( my $entry = $_ );
		if ( $entry =~ /NAME\s+(.*?)\n/msx ) {
			$name = $1;
		}
		else {
			$name = $EMPTY;
		}
		if ( $entry =~ /DESC\s+(.*?)\n/msx ) {
			$desc = $1;
		}
		else {
			$desc = $EMPTY;
		}
		if ( defined $name && defined $desc ) {
			$entries{$name} = $desc;
		}
	}

	return %entries;

}

__END__

=for hmmcompete hmmsearch HMMs altpred hmmsearch KOUA

=head1 NAME

hmmcompete - Report the best classifier when multiple 
             HMMs are matching the same peptide sequence

=head1 USAGE

hmmcompete [options] --hmm <hmmDb> -in <seqFastaDb>

=head1 SYNOPSIS

hmmcompete [options] --hmm <hmmDb> -in <seqFastaDb>

  Options:
    --out, -o	Redirect the main human-readable output to a file <f> instead of the default stdout.
	--help, -h	Print a brief reminder of command line usage and available options then exit.
	--desc, -d	Display profile description in the main output when the description is present in the profile. Default: 'Off'.
	--altpred	Display number of alternative profile HMM matching a sequence 
			as well as a summarized description of each alternative match. Default: 'Off'.
	--allseq	Also report sequences not matched by any model. Default: 'Off' i.e. only sequences matched by a profile in hmmDB are reported by default.
	--pepreg	Display region of the target sequence that matched the best model hit. Default: 'Off'.
	--hstblout	Save an output file similar to that of hmmsearch run with the --domtblout option. 
				Will only report the best prediction/classification where available. 
				Sequences not matched by any model are not reported. Alternative HMM matches are also ignored.
	--htmout	Save a HTML version of the output. Useful for web integration.
	--version, -v	Print hmmcompete version and exit

=head1 DESCRIPTION

hmmcompete is proposed as an add-on to the HMMER3 suite.
hmmcompete internally runs hmmsearch which is therefore required 
and should be available via your environment PATH variable. If you
don't have HMMER3 installed, please install it and make it available
on your Path. Compatible version of the HMMER3 suite can be found
at http://hmmer.org/ . 

hmmcompete is used to search a profile database against 
a sequence database. For each profile in <hmmdb>, use that query to 
search the target database of sequences in <seqFastaDb>, and output 
for each sequence the best matching profile. hmmcompete is a perl 
script that internally runs hmmsearch and processes its output to only
report the profile best hit for each sequence. The main output is a 
tab-separated file indicating for each sequence in <seqFastaDb> the 
model giving the best domain bit score. Bit scores for alternative 
matches can also be reported using the --altpred option. The -o option 
allows redirecting the main output, including throwing it away in /dev/null.

=head1 REQUIRED ARGUMENTS

	--hmm <f>	The profile database to be used for sequence classification. HMMER3 profiles.
	-i|--in <f>	The sequence database to be classified. In FASTA format
	

=head1 OPTIONS

	-o|--out <f>	Redirect the main human-readable output to a file <f> instead of the default stdout.
	-h|--help	Print a brief reminder of command line usage and available options then exit.
	-d|--desc	Display profile description in the main output when the description is present in the profile. Default: 'Off'.
	--altpred	Display number of alternative profile HMM matching a sequence 
			as well as a summarized description of each alternative match. Default: 'Off'.
	--allseq	Also report sequences not matched by any model. Default: 'Off' i.e. only sequences matched by a profile in hmmDB are reported by default.
	--pepreg	Display region of the target sequence that matched the best model hit. Default: 'Off'.
	--hstblout <f>	Save an output file similar to that of hmmsearch run with the --domtblout option. 
				Will only report the best prediction/classification where available. 
				Sequences not matched by any model are not reported. Alternative HMM matches are also ignored.
	--htmout <f>	Save a HTML version of the output. Useful for web integration.
	-v	Print hmmcompete version and exit

=head1 DEPENDENCIES

  hmmer suite of program. See hmmer.org for more details.

=head1 BUGS AND LIMITATIONS

  No one to our knowledge. Please report any issue to the issue tracker at
  https://github.com/koualab/hmmcompete/issues

=head1 LICENSE AND COPYRIGHT


=head1 INCOMPATIBILITIES

  Not known to date.

=head1 DIAGNOSTICS

=head1 EXIT STATUS

=head1 CONFIGURATION


=head1 AUTHOR

  Dominique KOUA <dominique dot koua at inphb dot ci>
  
=cut
